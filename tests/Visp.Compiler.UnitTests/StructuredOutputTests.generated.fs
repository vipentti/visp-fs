// Copyright 2023 Ville Penttinen
// Distributed under the MIT License.
// https://github.com/vipentti/visp-fs/blob/main/LICENSE.md

// AUTO GENERATED
// DO NOT MODIFY BY HAND
// generated by test-generator.visp

namespace StructuredOutputTests

open Xunit

[<VerifyXunit.UsesVerify>]
module ``tests_while_while-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/while/while-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_while_while-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/while/while-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_for-to_for-to-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/for-to/for-to-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_dot_dot-shorthands`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/dot/dot-shorthands.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_pats_record-pat-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/pats/record-pat-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_pats_fn-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/pats/fn-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_pats_fn-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/pats/fn-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_pats_let-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/pats/let-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_member-get-set-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/member-get-set-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_type-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/type-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_custom-comparison-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/custom-comparison-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_byrefs-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/byrefs-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_static-members-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/static-members-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_record-2`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/record-2.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_member-fn-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/member-fn-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_union-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/union-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_record-3`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/record-3.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_type-alias-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/type-alias-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_val-ctor-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/val-ctor-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_object-exprs-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/object-exprs-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_lambda-shorthand-record-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/lambda-shorthand-record-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_record-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/record-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_record-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/record-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_type_record-4`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/type/record-4.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_functions_apply-method-args-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/functions/apply-method-args-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_functions_cons-concat-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/functions/cons-concat-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_hashset_hashset-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/hashset/hashset-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_strings-interpolation-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/strings-interpolation-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_strings-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/strings-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_keyword-strings-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/keyword-strings-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_match-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/match-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_strings-interpolation-3`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/strings-interpolation-3.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_sym-with-arrow-in-macro-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/sym-with-arrow-in-macro-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_tuple-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/tuple-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_generic-args-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/generic-args-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_strings-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/strings-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_lambda-shorthand-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/lambda-shorthand-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_strings-interpolation-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/strings-interpolation-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_ambiguous-tokens-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/ambiguous-tokens-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_numbers-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/numbers-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_props`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/props.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_operators-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/operators-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_call-tuple-args-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/call-tuple-args-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_span-to-int32-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/span-to-int32-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_let-values`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/let-values.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_match-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/match-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_seq-as-generic-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/seq-as-generic-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_tupled-special-forms-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/tupled-special-forms-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_strings-interpolation-2`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/strings-interpolation-2.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_parsing_operators-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/parsing/operators-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_arrays_array2d-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/arrays/array2d-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_arrays_array2d-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/arrays/array2d-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_arrays_array-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/arrays/array-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_atom_atom-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/atom/atom-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_vector_vector-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/vector/vector-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_numbers_math-ops-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/numbers/math-ops-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_numbers_int-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/numbers/int-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_collections_list-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/collections/list-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_chars_char-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/chars/char-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_chars_char-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/chars/char-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_chars_char-2`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/chars/char-2.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_include_include-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/include/include-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_include_include-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/include/include-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_hashmap_hashmap-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/hashmap/hashmap-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_cexpr_cexpr-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/cexpr/cexpr-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_cexpr_cexpr-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/cexpr/cexpr-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_for-in_for-in-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/for-in/for-in-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_for-in_for-in-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/for-in/for-in-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_for-in_for-in-2`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/for-in/for-in-2.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_for-in_for-in-4`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/for-in/for-in-4.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_for-in_for-in-3`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/for-in/for-in-3.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_attributes_let-attributes-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/attributes/let-attributes-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_attributes_attributes-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/attributes/attributes-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_if_if-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/if/if-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_quotation_quote-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/quotation/quote-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_builtin-macros_thread-first-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/builtin-macros/thread-first-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_builtin-macros_thread-first-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/builtin-macros/thread-first-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_builtin-macros_thread-last-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/builtin-macros/thread-last-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_builtin-macros_cond-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/builtin-macros/cond-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_stringify-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/stringify-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_up-macro-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/up-macro-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_nested-macro-expansion-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/nested-macro-expansion-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_struct-example-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/struct-example-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_bar-parens-in-macro-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/bar-parens-in-macro-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_count-exprs-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/count-exprs-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_dbg-example-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/dbg-example-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_syntax-macro-2`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/syntax-macro-2.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_syntax-macro-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/syntax-macro-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_nested-macro-expansion-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/nested-macro-expansion-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_cond-macro-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/cond-macro-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_struct-macro-2`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/struct-macro-2.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_chars-in-macros-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/chars-in-macros-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_when-unless-example-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/when-unless-example-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_cond-macro-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/cond-macro-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_struct-macro-3`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/struct-macro-3.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_my-rinit-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/my-rinit-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_macro-lambda-shorthand-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/macro-lambda-shorthand-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_struct-macro-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/struct-macro-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_my-const-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/my-const-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_and-example-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/and-example-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_while-match-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/while-match-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_macros_or-example-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/macros/or-example-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-4`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-4.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-11`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-11.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-3`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-3.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-9`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-9.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-10`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-10.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-15`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-15.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-16`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-16.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-1`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-1.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_variables-0`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/variables-0.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-7`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-7.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-2`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-2.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-13`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-13.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-14`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-14.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-6`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-6.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-8`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-8.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-12`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-12.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-17`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-17.visp"

[<VerifyXunit.UsesVerify>]
module ``tests_examples_example-5`` =
    [<Fact>]
    let ``structured output`` () = TestUtils.runStructuredOutputTest "tests/examples/example-5.visp"


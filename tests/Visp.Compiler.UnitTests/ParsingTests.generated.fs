// Copyright 2023 Ville Penttinen
// Distributed under the MIT License.
// https://github.com/vipentti/visp-fs/blob/main/LICENSE.md

// AUTO GENERATED
// DO NOT MODIFY BY HAND
// generated by test-generator.visp

[<VerifyXunit.UsesVerify>]
module ParsingTests

open Xunit

[<Fact>]
let ``can parse tests_atom_atom-0.visp`` () = TestUtils.runTest "tests/atom/atom-0.visp"

[<Fact>]
let ``can parse tests_chars_char-0.visp`` () = TestUtils.runTest "tests/chars/char-0.visp"

[<Fact>]
let ``can parse tests_dot_dot-shorthands.visp`` () = TestUtils.runTest "tests/dot/dot-shorthands.visp"

[<Fact>]
let ``can parse tests_examples_example-0.visp`` () = TestUtils.runTest "tests/examples/example-0.visp"

[<Fact>]
let ``can parse tests_examples_example-1.visp`` () = TestUtils.runTest "tests/examples/example-1.visp"

[<Fact>]
let ``can parse tests_examples_example-10.visp`` () = TestUtils.runTest "tests/examples/example-10.visp"

[<Fact>]
let ``can parse tests_examples_example-11.visp`` () = TestUtils.runTest "tests/examples/example-11.visp"

[<Fact>]
let ``can parse tests_examples_example-12.visp`` () = TestUtils.runTest "tests/examples/example-12.visp"

[<Fact>]
let ``can parse tests_examples_example-13.visp`` () = TestUtils.runTest "tests/examples/example-13.visp"

[<Fact>]
let ``can parse tests_examples_example-14.visp`` () = TestUtils.runTest "tests/examples/example-14.visp"

[<Fact>]
let ``can parse tests_examples_example-15.visp`` () = TestUtils.runTest "tests/examples/example-15.visp"

[<Fact>]
let ``can parse tests_examples_example-16.visp`` () = TestUtils.runTest "tests/examples/example-16.visp"

[<Fact>]
let ``can parse tests_examples_example-17.visp`` () = TestUtils.runTest "tests/examples/example-17.visp"

[<Fact>]
let ``can parse tests_examples_example-2.visp`` () = TestUtils.runTest "tests/examples/example-2.visp"

[<Fact>]
let ``can parse tests_examples_example-3.visp`` () = TestUtils.runTest "tests/examples/example-3.visp"

[<Fact>]
let ``can parse tests_examples_example-4.visp`` () = TestUtils.runTest "tests/examples/example-4.visp"

[<Fact>]
let ``can parse tests_examples_example-5.visp`` () = TestUtils.runTest "tests/examples/example-5.visp"

[<Fact>]
let ``can parse tests_examples_example-6.visp`` () = TestUtils.runTest "tests/examples/example-6.visp"

[<Fact>]
let ``can parse tests_examples_example-7.visp`` () = TestUtils.runTest "tests/examples/example-7.visp"

[<Fact>]
let ``can parse tests_examples_example-8.visp`` () = TestUtils.runTest "tests/examples/example-8.visp"

[<Fact>]
let ``can parse tests_examples_example-9.visp`` () = TestUtils.runTest "tests/examples/example-9.visp"

[<Fact>]
let ``can parse tests_examples_variables-0.visp`` () = TestUtils.runTest "tests/examples/variables-0.visp"

[<Fact>]
let ``can parse tests_for-in_for-in-0.visp`` () = TestUtils.runTest "tests/for-in/for-in-0.visp"

[<Fact>]
let ``can parse tests_for-in_for-in-1.visp`` () = TestUtils.runTest "tests/for-in/for-in-1.visp"

[<Fact>]
let ``can parse tests_for-in_for-in-2.visp`` () = TestUtils.runTest "tests/for-in/for-in-2.visp"

[<Fact>]
let ``can parse tests_for-in_for-in-3.visp`` () = TestUtils.runTest "tests/for-in/for-in-3.visp"

[<Fact>]
let ``can parse tests_for-in_for-in-4.visp`` () = TestUtils.runTest "tests/for-in/for-in-4.visp"

[<Fact>]
let ``can parse tests_hashmap_hashmap-0.visp`` () = TestUtils.runTest "tests/hashmap/hashmap-0.visp"

[<Fact>]
let ``can parse tests_hashset_hashset-0.visp`` () = TestUtils.runTest "tests/hashset/hashset-0.visp"

[<Fact>]
let ``can parse tests_if_if-0.visp`` () = TestUtils.runTest "tests/if/if-0.visp"

[<Fact>]
let ``can parse tests_numbers_int-0.visp`` () = TestUtils.runTest "tests/numbers/int-0.visp"

[<Fact>]
let ``can parse tests_parsing_lambda-shorthand-0.visp`` () = TestUtils.runTest "tests/parsing/lambda-shorthand-0.visp"

[<Fact>]
let ``can parse tests_parsing_let-values.visp`` () = TestUtils.runTest "tests/parsing/let-values.visp"

[<Fact>]
let ``can parse tests_parsing_match-0.visp`` () = TestUtils.runTest "tests/parsing/match-0.visp"

[<Fact>]
let ``can parse tests_parsing_props.visp`` () = TestUtils.runTest "tests/parsing/props.visp"

[<Fact>]
let ``can parse tests_parsing_strings-0.visp`` () = TestUtils.runTest "tests/parsing/strings-0.visp"

[<Fact>]
let ``can parse tests_parsing_tuple-0.visp`` () = TestUtils.runTest "tests/parsing/tuple-0.visp"

[<Fact>]
let ``can parse tests_quotation_quote-0.visp`` () = TestUtils.runTest "tests/quotation/quote-0.visp"

[<Fact>]
let ``can parse tests_type_type-0.visp`` () = TestUtils.runTest "tests/type/type-0.visp"

[<Fact>]
let ``can parse tests_vector_vector-0.visp`` () = TestUtils.runTest "tests/vector/vector-0.visp"

[<Fact>]
let ``can parse tests_while_while-0.visp`` () = TestUtils.runTest "tests/while/while-0.visp"

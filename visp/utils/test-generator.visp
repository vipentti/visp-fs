;; Copyright 2023 Ville Penttinen
;; Distributed under the MIT License.
;; https://github.com/vipentti/visp-fs/blob/main/LICENSE.md
;;
;; for basic syntax highlighting
;; vim: set syntax=clojure:
(open System.IO)

(fn genTestHeader (moduleName)
  (->> (sprintf """
// Copyright 2023 Ville Penttinen
// Distributed under the MIT License.
// https://github.com/vipentti/visp-fs/blob/main/LICENSE.md

// AUTO GENERATED
// DO NOT MODIFY BY HAND
// generated by test-generator.visp

namespace %s

open Xunit
  """ moduleName)
    .Trim))


(fn GetTestFilePath ((parent: string) (path: string))
  (->> (.Replace path parent "")
      #(.Replace %1 "\\" "/")
      #(.TrimStart %1 #\/)
      #(.TrimStart %1 #\\)))

(fn NormalizeTestName ((parent: string) (path: string))
  (->> (GetTestFilePath parent path)
    #(.Replace %1 "/" "_")
    #(.Replace %1 "\\" "_")))

(fn GetTestCategory ((parent: string) (path: string))
  (->> path Path.GetDirectoryName #(.Replace %1 parent "")
    #(NormalizeTestName parent %1)))

(fn genTestTemplate ((prefix: string) (path: string))
  (let path (.Replace path "\\" "/"))
  (let testname (->> path #(.Replace %1 "/" "_")))

  (let template (sprintf #r"""
[<Fact>]
let ``%s %s`` () = TestUtils.runTest "%s"
  """ prefix testname path))
  (->> template .Trim))

(fn IsIgnoredFile ([file: string])
  (let dir (.GetDirectoryName Path file))
  (or (.Contains dir "errors")
      (.Contains file "skip")
    ))

(type TestScenario ([m : string] [prefix: string])
  (member _.Prefix prefix)
  (member _.Module m))

(fn write ((w: System.IO.StringWriter) (s: string))
  (.Write w s))

(fn writeln ((w: System.IO.StringWriter) (s: string))
  (write w s)
  (write w (+NewLine System.Environment)))

(fn GenerateTestGroup (prefix groups)
  (match groups
    [(id . files)
      (let writer (new System.IO.StringWriter))

      (let write (write writer))
      (let writeln (writeln writer))

      (writeln "[<VerifyXunit.UsesVerify>]")
      (writeln (sprintf "module ``%s`` =" id))

      (for/in [[file: string] files]
        (let name (->> (.Replace file "\\" "/") #(.Replace %1 "/" "_")))
        (write "    ")
        (writeln "[<Fact>]")
        (write "    ")
        (writeln (->> (sprintf #r"""let ``%s %s`` () = TestUtils.runTest "%s" """ prefix name file) .Trim))
        ()
      )

      (.ToString writer)
    ]
  ))

(fn GenerateTestModulePerFile (parent method prefix file)
  (let writer (new System.IO.StringWriter))

  (let write (write writer))
  (let writeln (writeln writer))

  (let file (GetTestFilePath parent file))
  (let id (NormalizeTestName parent file))

  (writeln "[<VerifyXunit.UsesVerify>]")
  (writeln (sprintf "module ``%s`` =" (.Replace id ".visp" "")))

  ;; (let name (->> (.Replace file "\\" "/") #(.Replace %1 "/" "_")))
  (write "    ")
  (writeln "[<Fact>]")
  (write "    ")
  (writeln (->> (sprintf #r"""let ``%s`` () = %s "%s" """ prefix method file) .Trim))
  ()

  (.ToString writer)
  )

(fn genTestsBase ([scenario : TestScenario] [parent: string] [files: seq<string>])
  (let tests (->> files
    (Seq.filter #(not (IsIgnoredFile %1)))
    (Seq.map (fn [file]
      ;; (GetTestCategory parent file)
      (let simplified
        (->> (.Replace file parent "")
          #(.TrimStart %1 #\/)
          #(.TrimStart %1 #\\)))
      (genTestTemplate (+Prefix scenario) simplified)
    ))))

  (let header (genTestHeader (+Module scenario)))
  (let sep (+ (+NewLine System.Environment) (+NewLine System.Environment)))
  (+ header
    sep
    (String.concat sep tests)
    (+NewLine System.Environment))
)

(fn genParserTests ([parent: string] [files: seq<string>])
  (genTestsBase
    (new TestScenario "ParsingTests" "can parse")
   parent files))

(fn genExecutionTests ([parent: string] [files: seq<string>])
  (genTestsBase
    (new TestScenario "ExecutionTests" "can execute")
    parent files))

(fn FindProjectRoot ()
  (mut cur (->> (.GetCurrentDirectory Directory) #(new DirectoryInfo %1)))
  (mut isDone false)

  (while (and (not isDone) (not (null? cur)))
    (printfn "cur is %A" cur)
    (let files
      (->> (.GetFiles cur "*.sln" (+TopDirectoryOnly SearchOption))
           (List.ofSeq)))
    (if (> (+Length files) 0)
      (set! isDone true)
      (set! cur (+Parent cur))
    ))

  (printfn "found project in %A" cur)

  cur)

(record TestGen
  [project: string]
  [header: string]
  [prefix: string]
  [method: string]
)

(fn WriteTests (gen projectRoot vispRoot files)
  (let targetDir (.Combine Path projectRoot "tests" (+project gen)))
  (let targetFile (.Combine Path targetDir $"{(+header gen)}.generated.fs"))

  (let header (genTestHeader (+header gen)))
  (let sep (+ (+NewLine System.Environment) (+NewLine System.Environment)))

  (let output (+ header
    sep
    (String.concat (+NewLine System.Environment)
      (List.map #(GenerateTestModulePerFile vispRoot (+method gen) (+prefix gen) %1) files)
    )
    (+NewLine System.Environment)))

  (printfn "generating %s" targetFile)
  (.WriteAllText System.IO.File targetFile output)
)

(fn WriteParserTests (projectRoot vispRoot files)
  (WriteTests
    {|
      [project "Visp.Compiler.UnitTests"]
      [header "ParsingTests"]
      [prefix "can parse"]
      [method "TestUtils.runTest"]
    |}
    projectRoot
    vispRoot
    files
  )

  (WriteTests
    {|
      [project "Visp.Compiler.UnitTests"]
      [header "StructuredOutputTests"]
      [prefix "structured output"]
      [method "TestUtils.runStructuredOutputTest"]
    |}
    projectRoot
    vispRoot
    files
  )

  (WriteTests
    {|
      [project "Visp.Compiler.UnitTests"]
      [header "TokenOutputTests"]
      [prefix "returns tokens"]
      [method "TestUtils.runTokenTest"]
    |}
    projectRoot
    vispRoot
    files
  )
)

(fn WriteExecutionTests (projectRoot vispRoot files)
  (WriteTests
    {|
      [project "Visp.ExecutionTests"]
      [header "ExecutionTests"]
      [prefix "can execute"]
      [method "TestUtils.runTest"]
    |}
    projectRoot
    vispRoot
    files
  )
)

(fn run ()
  (let projectRoot (FindProjectRoot))
  (let vispRoot (.Combine Path (+FullName projectRoot) "visp"))
  (let vispTests (.Combine Path vispRoot "tests"))
  (let files (->> (.GetFiles Directory vispTests "*.visp" (+AllDirectories SearchOption)) (List.ofSeq)))
  (let projectRoot (+FullName projectRoot))

  (let groups
    (->> files
      (List.filter #(not (IsIgnoredFile %1)))
  ))

  (WriteParserTests projectRoot vispRoot groups)
  (WriteExecutionTests projectRoot vispRoot groups)

  ())


(run)

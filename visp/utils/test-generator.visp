;; Copyright 2023 Ville Penttinen
;; Distributed under the MIT License.
;; https://github.com/vipentti/visp-fs/blob/main/LICENSE.md
;;
;; for basic syntax highlighting
;; vim: set syntax=clojure:
(open System.IO)

(fn genTestHeader ()
  (->> (sprintf """
// Copyright 2023 Ville Penttinen
// Distributed under the MIT License.
// https://github.com/vipentti/visp-fs/blob/main/LICENSE.md

// AUTO GENERATED
// DO NOT MODIFY BY HAND
// generated by test-generator.visp

[<VerifyXunit.UsesVerify>]
module ParsingTests

open Xunit
  """)
    .Trim))

(fn genTestTemplate ((path: string))
  (let path (.Replace path "\\" "/"))
  (let testname (->> path #(.Replace %1 "/" "_")))

  (let template (sprintf #r"""
[<Fact>]
let ``can parse %s`` () = TestUtils.runTest "%s"
  """ testname path))
  (->> template .Trim))

(fn IsIgnoredFile ([file: string])
  (let dir (.GetDirectoryName Path file))
  (or (.Contains dir "errors")
      (.Contains dir "macros")
    ))

(fn genTests ([parent: string] [files: seq<string>])
  (let tests (->> files
    (Seq.filter #(not (IsIgnoredFile %1)))
    (Seq.map (fn [file]
      (let simplified
        (->> (.Replace file parent "")
          #(.TrimStart %1 #\/)
          #(.TrimStart %1 #\\)))
      (genTestTemplate simplified)
    ))))

  (let header (genTestHeader))
  (let sep (+ (+NewLine System.Environment) (+NewLine System.Environment)))
  (+ header
    sep
    (String.concat sep tests)
    (+NewLine System.Environment))
)

(fn FindProjectRoot ()
  (mut cur (->> (.GetCurrentDirectory Directory) #(new DirectoryInfo %1)))
  (mut isDone false)

  (while (and (not isDone) (not (null? cur)))
    (printfn "cur is %A" cur)
    (let files
      (->> (.GetFiles cur "*.sln" (+TopDirectoryOnly SearchOption))
           (List.ofSeq)))
    (if (> (+Length files) 0)
      (set! isDone true)
      (set! cur (+Parent cur))
    ))

  (printfn "found project in %A" cur)

  cur)

(fn run ()
  (let projectRoot (FindProjectRoot))
  (let vispRoot (.Combine Path (+FullName projectRoot) "visp"))
  (let vispTests (.Combine Path vispRoot "tests"))
  (let targetDir (.Combine Path (+FullName projectRoot) "tests" "Visp.Compiler.UnitTests"))
  (let targetFile (.Combine Path targetDir "ParsingTests.generated.fs"))

  (printfn "visp %s" vispTests)
  (printfn "target %s" targetDir)

  (let files (.GetFiles Directory vispTests "*.visp" (+AllDirectories SearchOption)))
  (let output (genTests vispRoot files))

  (.WriteAllText System.IO.File targetFile output (+UTF8 System.Text.Encoding))

  ())


(run)


;; Copyright 2024 Ville Penttinen
;; Distributed under the MIT License.
;; https://github.com/vipentti/visp-fs/blob/main/LICENSE.md
;;
;; for basic syntax highlighting
;; vim: set syntax=clojure:

;;
;; day3
;;
;; Include common utlities
(include "./common.visp")

;; Functions & types

(fn ParseFile ([text: string])
  ;; (mut lines (EnumerateSpanSplitLines text))

  (let rx (new Regex "mul\((\d{1,3}),(\d{1,3})\)" (.+Compiled RegexOptions)))

  (let matches (.Matches rx text))

  (mut pairs (||))

  (for/in [mtch matches]
    ;;; (printfn "foo %A %A %A" (.+Value mtch) (->> mtch +Groups .[1]) (->> mtch +Groups .[2]))
    (up! pairs (cons ((->> mtch +Groups .[1] +Value int) . (->> mtch +Groups .[2] +Value int)))))

  (List.rev pairs))

(fn Part1 (parsedInput)
  ;; Implement part1
  ;; (printfn "%A" parsedInput)
  (->> parsedInput
    (List.fold #(+ %1 (* (fst %2) (snd %2))) 0)))

(fn Part2 (parsedInput)
  ;; Implement part2
  0)

;; Implementation

(let parsed (-> (ReadInput "day3") ParseFile))

;; Expected results
(let PART1_EXPECTED_RESULT (if IS_EXAMPLE 161 174561379))
(let PART2_EXPECTED_RESULT (if IS_EXAMPLE -1 -1))

(WriteResult "part1" (-> parsed Part1) PART1_EXPECTED_RESULT)
(WriteResult "part2" (-> parsed Part2) PART2_EXPECTED_RESULT)

()

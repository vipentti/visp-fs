;; Copyright 2024 Ville Penttinen
;; Distributed under the MIT License.
;; https://github.com/vipentti/visp-fs/blob/main/LICENSE.md
;;
;; for basic syntax highlighting
;; vim: set syntax=clojure:
(require Flurl.Http "4.0.2")

(open System)
(open System.IO)
(open Flurl.Http)

(fn GetFileTemplate (day)
  $$"""
;; Copyright 2024 Ville Penttinen
;; Distributed under the MIT License.
;; https://github.com/vipentti/visp-fs/blob/main/LICENSE.md
;;
;; for basic syntax highlighting
;; vim: set syntax=clojure:

;;
;; {{day}}
;;
;; Include common utlities
(include "./common.visp")

;; Functions & types

(fn ParseFile ([text: string])
  (mut lines (EnumerateSpanSplitLines text))

  (Macro_ReadWhileNotEmpty [line lines]
    ;; Read contents here
    ())
  )

(fn Part1 (parsedInput)
  ;; Implement part1
  0)

(fn Part2 (parsedInput)
  ;; Implement part2
  0)

;; Implementation

(let parsed (-> (ReadInput "{{day}}") ParseFile))

;; Expected results
(let PART1_EXPECTED_RESULT (if IS_EXAMPLE -1 -1))
(let PART2_EXPECTED_RESULT (if IS_EXAMPLE -1 -1))

(WriteResult "part1" (-> parsed Part1) PART1_EXPECTED_RESULT)
(WriteResult "part2" (-> parsed Part2) PART2_EXPECTED_RESULT)

()
"""
)

(fn TryGetNamedArg (name)
  (match (Array.tryFindIndex #(= name %1) ARGV)
    [(Some index)
      (if (< (inc index) (+Length ARGV))
        (Some (.[(inc index)] ARGV))
        None)
    ]
    [None None]))

(fn Run ()
  (let dayNr (match (TryGetNamedArg "--day")
    [(Some it) it]
    [None (failwithf "Missing --day")]
  ))

  (let sessionToken (match (TryGetNamedArg "--session")
    [(Some it) it]
    [None (match (TryGetEnvVar "AOC_SESSION")
      [(Some it) it]
      [None (failwithf "Missing either --session or env:AOC_SESSION")]
    )]
  ))

  (printfn "Setting up day %s" dayNr)

  (let dayName $"day{dayNr}")

  (let exampleInput $"{dayName}_example.txt")
  (let mainInput $"{dayName}.txt")

  (printfn "CWD: %A" (GetCurrentDirectory))

  (let targetFile (->>
    (Path.Combine ((GetCurrentDirectory) . $"{dayName}.visp"))
    (Path.GetFullPath)
  ))

  (let inputPath (->>
    (Path.Combine ((GetCurrentDirectory) . "inputs"))
    (Path.GetFullPath)
  ))

  (let exampleInputPath (->> (-Combine Path (inputPath . exampleInput)) (Path.GetFullPath)))
  (let mainInputPath (->> (-Combine Path (inputPath . mainInput)) (Path.GetFullPath)))

  (unless (.Exists File targetFile)
    (printfn "new %s" targetFile)
    (.WriteAllText System.IO.File targetFile (GetFileTemplate dayName))
  )

  (unless (.Exists File exampleInputPath)
    (printfn "new %s" exampleInputPath)
    (.WriteAllText System.IO.File exampleInputPath "")
  )

  (unless (.Exists File mainInputPath)
    (printfn "new %s" mainInputPath)
    (->> (task->
      (let! content
        (begin
          (let url $"https://adventofcode.com/2024/day/{dayNr}/input")
          (printfn "downloading: %s" url)
          (->> url
            #(-WithCookie %1 ("session" . sessionToken))
            .GetStringAsync
          )
        )
      )
      (do! (.WriteAllTextAsync System.IO.File mainInputPath content)))

      (Async.AwaitTask)
      (Async.RunSynchronously)

    )
  )

  ;; (cond_
  ;;   [(.Exists File targetFile)
  ;;     (printfn "%s found" targetFile)
  ;;   ]
  ;;   [_
  ;;     (printfn "new %s" targetFile)
  ;;   ]
  ;; )
)

(Run)

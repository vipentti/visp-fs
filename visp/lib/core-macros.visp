;; Copyright 2023 Ville Penttinen
;; Distributed under the MIT License.
;; https://github.com/vipentti/visp-fs/blob/main/LICENSE.md
;;
;; for basic syntax highlighting
;; vim: set syntax=clojure:

;; core-macros

(syntax-macro and
  [(_) true]
  [(_ one) one]
  [(_ cond exprs ...)
    (if cond
      (and exprs ...)
      false)
  ])

(syntax-macro or
  [(_) false]
  [(_ one) one]
  [(_ cond exprs ...)
    (do
      (let orTemp cond)
      (if orTemp
        orTemp
        (or exprs ...)
      ))
  ])

(syntax-macro cond
  [(_) (failwith "unreachable cond")]
  [(_ one) one]
  [(_ var body exprs ...)
    (if var
      body
      (cond exprs ...))
  ])

(syntax-macro cond_
  [(_) (failwith "unbalanced cond")]
  [(_ ((?discard) body ...))
    (if true
      (begin body ...)
      (failwith "unreachable"))
  ]
  [(_ (test body ...) rest ...)
    (if test
      (begin body ...)
      (cond_ rest ...))
  ])

(syntax-macro match-fn
  [(_ (c ...) rest ...)
    (fn (arg)
      (match arg
        [c ...]
        rest ...
      ))
  ]
  [(_ sym m rest ...)
    (fn sym (arg)
      (match arg
        m
        rest ...
      ))
  ]
)

(syntax-macro while-match
  [(_ cnt body ...)
    (do
       (mut notdone true)
       (while notdone
        (set! notdone
          (match cnt
            body ...
          )))
       ())
  ]
)

(syntax-macro struct
  [(_ typ ((arg1 : argtyp1) (argrest : argresttyp) ...) body ...)
    (begin
      (#[Struct]
        type typ ((arg1 : argtyp1) (argrest : argresttyp) ...)
        body ...
      )

      (fn (m-concat-id mk typ) (arg1 argrest ...)
        (new typ arg1 argrest ...))
    )
  ])


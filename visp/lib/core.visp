;; Copyright 2023 Ville Penttinen
;; Distributed under the MIT License.
;; https://github.com/vipentti/visp-fs/blob/main/LICENSE.md
;;
;; for basic syntax highlighting
;; vim: set syntax=clojure:
;; TODO: Module + auto-open attribute?

(fn string->number [(it: string)]
    (let [result: Option<Number>] (Number.ParseOption it))
    (if (. result +IsNone)
        (failwithf "not valid number '%s'" it)
        (. result +Value)))

(fn string->int32 [(it: string)]
    (System.Int32.Parse it))

(fn string->int [(it: string)]
    (System.Int64.Parse it))

(fn string-empty? [(it: string)]
    (= 0 (.+Length it)))

(fn inline char-digit? [(ch: char)]
    (System.Char.IsDigit ch))

(fn inline char->int [(it: char)]
    (int64 it))

(let char_zero (int #\0))
(fn inline char->value [(it: char)] (- (int it) char_zero))

(fn i64-inc [(it: int64)]
    (i64-+ it 1))

(fn i64-add [(lhs: int64) (rhs: int64)]
    (i64-+ lhs rhs))

(fn vec->value ([v: Vector]) (Value.vector v))
(fn VecToValue ([v: Vector]) (Value.vector v))

(fn inline add [(lhs: ^a) (rhs: ^a)] (+ lhs rhs))
(fn inline sub [(lhs: ^a) (rhs: ^a)] (- lhs rhs))
(fn inline mul [(lhs: ^a) (rhs: ^a)] (* lhs rhs))
(fn inline div [(lhs: ^a) (rhs: ^a)] (/ lhs rhs))
(fn inline rem [(lhs: ^a) (rhs: ^a)] (CoreMethods.rem_impl lhs rhs))
(fn inline erem [(lhs: ^a) (rhs: ^a)] (CoreMethods.euc_rem_impl lhs rhs))
(fn inline divrem [(lhs: ^a) (rhs: ^a)]
  ((/ lhs rhs) . (rem lhs rhs)))
(fn inline sub1 [a] (- a LanguagePrimitives.GenericOne))
(fn inline dec [a] (- a LanguagePrimitives.GenericOne))
(fn inline add1 [a] (+ a LanguagePrimitives.GenericOne))
(fn inline inc [a] (+ a LanguagePrimitives.GenericOne))
(fn inline dec64 [a] (- a 1L))
(fn inline inc64 [a] (+ a 1L))

(fn inline span->int32 [(sp: System.ReadOnlySpan<char>)]
  (System.Int32.Parse sp))

(fn inline span->int64 [(sp: System.ReadOnlySpan<char>)]
  (System.Int64.Parse sp))

(fn inline span->double [(sp: System.ReadOnlySpan<char>)]
  (System.Double.Parse sp))

(fn inline span->bigint [(sp: System.ReadOnlySpan<char>)]
  (System.Numerics.BigInteger.Parse sp))

(fn inline string->double [(sp: string)]
  (System.Double.Parse sp))

(fn inline string->bigint [(sp: string)]
  (System.Numerics.BigInteger.Parse sp))

(fn inline try-string->int32 [(s: string)]
  (match (System.Int32.TryParse s)
    [(false . _) None]
    [(true . v ) (Some v)]
  ))

(fn inline gcd [a b]
  (if (= b LanguagePrimitives.GenericZero)
    a
    (if (= a LanguagePrimitives.GenericZero)
      b
      (begin
        (mut a a)
        (mut b b)
        (while (!= b LanguagePrimitives.GenericZero)
          (let temp b)
          (set! b (rem a b))
          (set! a temp)
        )
        a
      ))))

(fn inline lcm (a b)
  (/ (* a b) (gcd a b)))

(fn rec gcd64 [a b]
  (match (a . b)
    [(x, 0L) x]
    [(0L, y) y]
    [(x, y) (gcd64 y (rem x y))]
  ))

(fn inline int32->sign [(a: int32)] (System.Math.Sign a))
(fn inline int64->sign [(a: int64)] (System.Math.Sign a))

(fn inline lcm64 (a b)
  (/ (* a b) (gcd64 a b)))

(fn GetCurrentDirectory () (System.IO.Directory.GetCurrentDirectory))

(fn TryGetEnvVar ([v: string])
  (match (.GetEnvironmentVariable System.Environment v)
    [null None]
    [it (Some it)]
  ))

()

;; Copyright 2023 Ville Penttinen
;; Distributed under the MIT License.
;; https://github.com/vipentti/visp-fs/blob/main/LICENSE.md
;;
;; for basic syntax highlighting
;; vim: set syntax=clojure:


(type Grid char[,])

(struct Pos ([x: int32] [y: int32])
  (member _.X x)
  (member _.Y y)

  (override fn _.ToString ()
    (sprintf "(y: %A, x: %A)" y x)
  ))

(fn inline NorthOf ([p: Pos])
  (mkPos (+X p) (dec (+Y p))))

(type TileMap ([grid: Grid] [rocks: array<Pos>])
  (let grid grid)
  (let height (Array2D.length1 grid))
  (let width (Array2D.length2 grid))

  (member _.Rocks rocks)

  (override fn _.ToString()
    (sprintf "TileMap\n%A" grid))

  (member fn t.MoveRock ([from: Pos] [to: Pos])
    (match (.[from] t)
      [(Some #\O)
        (match (.[to] t)
          [(Some #\.)
            (set! (.[from] t) #\.)
            (set! (.[to] t) #\O)
            true
          ]
          [_ false]
        ) ]
      [_ false]
    ))

  (member _.Item
    (get ([pos: Pos])
      (let y (+Y pos))
      (let x (+X pos))

      (cond_
        [(and (and (>= y 0) (< y height))
              (and (>= x 0) (< x width)))
          (Some (.[y, x] grid))
        ]
        [_ None])
    )
    (set ([pos: Pos]) ch
      (let y (+Y pos))
      (let x (+X pos))
      (cond_
        [(and (and (>= y 0) (< y height))
              (and (>= x 0) (< x width)))

          (set! (.[y, x] grid) ch)
        ]
        [_ ()])
    )
  )
)

(fn TiltNorth ([tm: TileMap])
  (let rocks (+Rocks tm))
  (let rocksToMove (->> rocks (Array.filter #(> (+Y %1) 0))))


  (for/in [rock rocksToMove]
    (printfn "%A" rock)
    (mut pos rock)
    (while (-MoveRock tm pos (NorthOf pos))
      (set! pos (NorthOf pos))
    ))

  (printfn "%A" tm)

  ())

(printfn "OK")

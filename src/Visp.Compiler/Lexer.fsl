// FsLex lexer
{
// Copyright 2023 Ville Penttinen
// Distributed under the MIT License.
// https://github.com/vipentti/visp-fs/blob/main/LICENSE.md

module Visp.Compiler.Lexer

open Visp.Compiler.DiagnosticsLogger
open Visp.Compiler.StringResources
open FSharp.Text.Lexing
open System
open System.Globalization
open Visp.Compiler.SyntaxParser
open Visp.Compiler.ParseHelpers
open Visp.Compiler.LexHelpers

exception SyntaxError of string

module Ranges =
    /// Whether valid as signed int8 when a minus sign is prepended, compares true to 0x80
    let isInt8BadMax x = 1 <<< 7 = x

    /// Whether valid as signed int16 when a minus sign is prepended, compares true to 0x8000
    let isInt16BadMax x = 1 <<< 15 = x

    /// Whether valid as signed int32 when a minus sign is prepended, compares as string against "2147483648".
    let isInt32BadMax = let max = string(1UL <<< 31) in fun s -> max = s

    /// Whether valid as signed int64 when a minus sign is prepended, compares as string against "9223372036854775808".
    let isInt64BadMax = let max = string(1UL <<< 63) in fun s -> max = s

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) =
    lexbuf.EndPos <- lexbuf.EndPos.NextLine

let outputToken lexbuf =
  (sprintf "token: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)

let unexpected_char mode (lexbuf: LexBuffer<_>) =
  let file = lexbuf.EndPos.FileName
  failwith (sprintf "%s SyntaxError: Unexpected char: '%s' %s:line %d Column: %d" mode (lexeme lexbuf) file (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)

/// Trim n chars from both sides of lexbuf, return string
let lexemeTrimBoth  (lexbuf : LexBuffer<_>) (n:int) (m:int) =
    let s = lexeme lexbuf
    let s = s.AsSpan()
    s.Slice(n, s.Length - (n+m)).ToString()

/// Trim n chars from the right of lexbuf, return string
let lexemeTrimRight lexbuf n = lexemeTrimBoth lexbuf 0 n

/// Trim n chars from the left of lexbuf, return string
let lexemeTrimLeft lexbuf n = lexemeTrimBoth lexbuf n 0

/// Throw a lexing error with a message
let fail (args: LexArgs) (lexbuf: LexBuffer<_>) msg dflt =
     let m = lexbuf.LexemeRange
     args.diagnosticsLogger.ErrorR(mkDiagnosticWithText(msg,m))
     dflt

// https://github.com/dotnet/fsharp/blob/main/src/Compiler/lex.fsl#L57C1
//--------------------------
// Integer parsing

let getSign32 (s:string) (p:byref<int>) l =
    if (l >= p + 1 && s.[p] = '-')
    then p <- p + 1; -1
    else 1

let isOXB c =
    let c = Char.ToLowerInvariant c
    c = 'x' || c = 'o' || c = 'b'

let is0OXB (s:string) p l =
    l >= p + 2 && s.[p] = '0' && isOXB s.[p+1]

let get0OXB (s:string) (p:byref<int>)  l =
    if is0OXB s p l
    then let r = Char.ToLowerInvariant s.[p+1] in p <- p + 2; r
    else 'd'

let parseBinaryUInt64 (s:string) =
    Convert.ToUInt64(s, 2)

let parseOctalUInt64 (s:string) =
    Convert.ToUInt64(s, 8)

let removeUnderscores (s:string) =
    s.Replace("_", "")

let parseInt32 (s:string) =
    let s = removeUnderscores s
    let l = s.Length
    let mutable p = 0
    let sign = getSign32 s &p l
    let specifier = get0OXB s &p l
    match Char.ToLower(specifier,CultureInfo.InvariantCulture) with
    | 'x' -> sign * (int32 (Convert.ToUInt32(UInt64.Parse(s.Substring(p), NumberStyles.AllowHexSpecifier,CultureInfo.InvariantCulture))))
    | 'b' -> sign * (int32 (Convert.ToUInt32(parseBinaryUInt64 (s.Substring(p)))))
    | 'o' -> sign * (int32 (Convert.ToUInt32(parseOctalUInt64  (s.Substring(p)))))
    | _ -> Int32.Parse(s, NumberStyles.AllowLeadingSign, CultureInfo.InvariantCulture)

let lexemeTrimRightToInt32 args lexbuf n =
    try parseInt32 (lexemeTrimRight lexbuf n)
    with _ -> fail args lexbuf (SR.lexOutsideIntegerRange()) 0

let evalFloat args lexbuf =
    try
        float32(removeUnderscores (lexemeTrimRight lexbuf 1))
    with _ ->
        fail args lexbuf (SR.lexInvalidFloat()) 0.0f

let startString nesting (lexbuf: LexBuffer<_>) =
    let buf = StringBuffer()
    let m = lexbuf.LexemeRange
    let startp = lexbuf.StartPos
    let fin =
        LexerStringFinisher (fun buf kind context cont ->
            // Adjust the start-of-token mark back to the true start of the token
            lexbuf.StartPos <- startp

            let isPart = context.HasFlag(LexerStringFinisherContext.InterpolatedPart)
            let isTripleQuote = context.HasFlag(LexerStringFinisherContext.TripleQuote)

            let synStringKind =
              if isTripleQuote then
                if kind.IsInterpolated then
                  Syntax.SynStringKind.InterpolatedTripleQuote nesting
                else
                  Syntax.SynStringKind.TripleQuote
              else
                if kind.IsInterpolated then
                  Syntax.SynStringKind.Interpolated nesting
                else
                  Syntax.SynStringKind.Regular

            // if kind.IsInterpolated then
            //   let s = buf.ToString()
            //   // if kind.IsInterpolatedFirst then
            //   //   if isPart then
            //   //     INTERP_STRING_BEGIN_PART (s, synStringKind, cont)
            //   //   else
            //   //     INTERP_STRING_BEGIN_END (s, synStringKind, cont)
            //   // else
            //   //   if isPart then
            //   //     INTERP_STRING_PART (s, cont)
            //   //   else
            //   //     INTERP_STRING_END (s, cont)
            //   STRING(buf.ToString(), Syntax.SynStringKind.Interpolated, cont)
            // else
            STRING(buf.ToString(), synStringKind, cont)
        )

    buf,fin,m
}

// https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/literals#literal-types

let letter = '\Lu' | '\Ll' | '\Lt' | '\Lm' | '\Lo' | '\Nl'
let digit = '\Nd'
let hex = ['0'-'9'] | ['A'-'F'] | ['a'-'f']
let separator = '_'

// ----- numbers ----

let xinteger =
  (  '0' ('x'| 'X')  hex ((hex | separator)* hex)?
   | '0' ('o'| 'O')  (['0'-'7']) (((['0'-'7']) | separator)* (['0'-'7']))?
   | '0' ('b'| 'B')  (['0'-'1']) (((['0'-'1']) | separator)* (['0'-'1']))?)
let integer = ['-' '+']? digit ((digit | separator)* digit)?
let int8 = integer 'y'
let uint8 = (xinteger | integer) 'u' 'y'
let int16 = integer 's'
let uint16 = (xinteger | integer) 'u' 's'
let int = integer
let int32 = integer 'l'
let uint32 = (xinteger | integer) 'u'
let uint32l = (xinteger | integer) 'u' 'l'
let nativeint = (xinteger | integer) 'n'
let unativeint = (xinteger | integer) 'u' 'n'
let int64 = (xinteger | integer) 'L'
let uint64 = (xinteger | integer) ('u' | 'U') 'L'
let xint8 = xinteger 'y'
let xint16 = xinteger 's'
let xint = xinteger
let xint32 = xinteger 'l'
let floatp = ['-' '+']? digit ((digit | separator)* digit)? '.' (digit ((digit | separator)* digit)?)?
let floate = ['-' '+']? digit ((digit | separator)* digit)? ('.' (digit ((digit | separator)* digit)?)? )? ('e'| 'E') ['+' '-']? digit ((digit | separator)* digit)?
let float = floatp | floate
let bignum =  integer ('I'  | 'N' | 'Z' | 'Q' | 'R' | 'G')
let ieee64 = float
let ieee32 = float ('f' | 'F')
let ieee32_dotless_no_exponent = integer ('f' | 'F')
let decimal = (float | integer) ('m' | 'M')
let xieee32 = xinteger 'l' 'f'
let xieee64 = xinteger 'L' 'F'

// ----- numbers ----

let SymbolicStartCharacters = ['%' '+' '-' '!' '?' '_' '-' '*' '&' '^']
let SymbolicExtra = [ '.' '\'' '/']

// https://github.com/dotnet/fsharp/blob/ade794633b4bb495da85c92ee780068b9c6f7344/src/Compiler/lex.fsl#L300
let escape_char = ('\\' ( '\\' | "\"" | '\'' | 'a' | 'f' | 'v' | 'n' | 't' | 'b' | 'r'))

let ident_sep = ['-' '_' '/' '.']

let ident_letter_chars = letter (letter | digit)*

let ident_with_sep = letter (letter | digit | ident_sep)*

let ident_start_char = letter | SymbolicStartCharacters
let ident_char = ( ident_start_char | digit | SymbolicExtra )
let ident = ident_start_char ident_char*
// let ident_array = letter (letter | digit)* '[' (',')* ']'

let ident_arrow = ident_letter_chars "->" ident_letter_chars?

let anyspace = [' ' '\t' '\r' '\n']
let whitespace = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"
let nonWhitespace = [^ ' ' '\t' '\r' '\n']
// let possible_char = [.]

// https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/symbol-and-operator-reference/#function-symbols-and-operators
// keep in sync with LexHelpers.infixOperatorSet
// src/Visp.Compiler/Syntax/LexHelpers.fs
let infix_operators = (
  "&&"
  | "||"
  | ":>"
  | "|>"
  | "||>"
  | "|||>"
  | "<<"
  | ">>"
  | "<|"
  | "<||"
  | "<|||"
  | ":?>"
  | "&&&"
  | "|||"
  | "^^^"
  | "<<<"
  | ">>>"
)

// keep in sync with LexHelpers.unaryOperatorSet
// src/Visp.Compiler/Syntax/LexHelpers.fs
let unary_operators = (
  "~~~"
)

let charWords = (
  "newline"
    | "linefeed"
    | "cr"
    | "lf"
    | "return"
    | "tab"
    | "nul"
    | "null"
    | "backspace"
    | "space"
)
let unicodeChar = ['0'-'9' 'a'-'f' 'A'-'F']
let unicodeChars =
  unicodeChar unicodeChar unicodeChar unicodeChar

let punct = [
  '{' '}'
  '(' ')'
  '[' ']'
  ]

let propShort = letter ident_char*

rule token (args: LexArgs) (skip: bool) = parse
  | whitespace { token args skip lexbuf }
  | newline    { newline lexbuf; token args skip lexbuf }
  | ";" [^'\n''\r']* { token args skip lexbuf  }
  | eof        { EOF }

  // punct

  | ident_arrow { SYMBOL (lexeme lexbuf) }
  | ident_letter_chars ">>" { TOKENLIST [SYMBOL (lexemeTrimRight lexbuf 2); OP_GREATER; OP_GREATER] }
  | "<<" ident_letter_chars { SYMBOL (lexeme lexbuf) }

  | infix_operators { INFIX_OP (lexeme lexbuf) }
  | '(' infix_operators { TOKENLIST [LPAREN; INFIX_OP (lexemeTrimLeft lexbuf 1)] }
  | unary_operators { UNARY_OP (lexeme lexbuf) }
  | '(' unary_operators { TOKENLIST [LPAREN; UNARY_OP (lexemeTrimLeft lexbuf 1)] }
  | '('           { LPAREN }
  | ')'           { RPAREN }
  | '{'           { LBRACE }
  | '}'           { RBRACE }
  | '['           { LBRACKET }
  | ']'           { RBRACKET }
  | "::"          { COLON_COLON }
  | ':' anyspace+ { COLON }
  | ','           { COMMA }
  | '|'           { BAR }

  | "..." { SYMBOL (lexeme lexbuf) }


  | "#nowarn" { HASH_IDENT ((lexeme lexbuf).TrimStart('#'))}

  | '.' propShort { DOT_METHOD (lexeme lexbuf) }
  | '-' propShort { APPLY_METHOD (lexeme lexbuf) }
  | '+' propShort { PROP_PLUS (lexeme lexbuf) }
  | "#("   { HASH_PAREN }
  | "#["   { HASH_BRACKET }
  | "#{"   { HASH_BRACE }
  | "{|"   { BRACE_BAR }
  | "|}"   { BAR_BRACE }
  | "[|"   { BRACKET_BAR }
  | "|]"   { BAR_BRACKET }
  | "(||)" { TOKENLIST [PAREN_BAR; BAR_PAREN] }
  | "(|"   { PAREN_BAR }
  | "|)"   { BAR_PAREN }
  | ".."   { DOTDOT }
  | "'"    { QUOTE_SYM }
  | ".["   { DOT_BRACKET }
  | ".+"   { DOT_PLUS }
  | '@'    { AT }
  | "#\\" charWords { CHAR (lexeme lexbuf) }
  | "#\\u" unicodeChars { CHAR (lexeme lexbuf) }
  | "#\\U" unicodeChars { CHAR (lexeme lexbuf) }
  | "#\\" nonWhitespace { CHAR (lexeme lexbuf) }

  // --- START OF NUMBERS ---

  | int8
      { let n = lexemeTrimRightToInt32 args lexbuf 1
        // Allow <max_int+1> to parse as min_int.  Allowed only because we parse '-' as an operator.
        if Ranges.isInt8BadMax n then INT8(SByte.MinValue, true (* 'true' = 'bad'*) )
        else if n > int SByte.MaxValue || n < int SByte.MinValue then fail args lexbuf (SR.lexOutsideEightBitSigned()) (INT8(0y, false))
        else INT8(sbyte n, false)  }

  | xint8
      { let n = lexemeTrimRightToInt32 args lexbuf 1
        if n > int Byte.MaxValue || n < 0 then fail args lexbuf (SR.lexOutsideEightBitSignedHex()) (INT8(0y, false))
        else INT8(sbyte(byte(n)), false) }

  | uint8
      { let n = lexemeTrimRightToInt32 args lexbuf 2
        if n > int Byte.MaxValue || n < 0 then fail args lexbuf (SR.lexOutsideEightBitUnsigned()) (UINT8(0uy))
        else UINT8(byte n)  }

  | int16
      { let n = lexemeTrimRightToInt32 args lexbuf 1
        // Allow <max_int+1> to parse as min_int.  Allowed only because we parse '-' as an operator.
        if Ranges.isInt16BadMax n then INT16(Int16.MinValue, true (* 'true' = 'bad'*) )
        else if n > int Int16.MaxValue || n < int Int16.MinValue then fail args lexbuf (SR.lexOutsideSixteenBitSigned()) (INT16(0s, false))
        else INT16(int16 n, false)  }

  | xint16
      { let n = lexemeTrimRightToInt32 args lexbuf 1
        if n > int UInt16.MaxValue || n < 0 then fail args lexbuf (SR.lexOutsideSixteenBitSigned()) (INT16(0s,false))
        else INT16(int16(uint16(n)), false) }

  | uint16
      { let n = lexemeTrimRightToInt32 args lexbuf 2
        if n > int UInt16.MaxValue || n < 0 then fail args lexbuf (SR.lexOutsideSixteenBitUnsigned()) (UINT16(0us))
        else UINT16(uint16 n) }
  | xint
  | int
      { let s = removeUnderscores (lexeme lexbuf)
        // Allow <max_int+1> to parse as min_int.  Allowed only because we parse '-' as an operator.
        if Ranges.isInt32BadMax s then INT32(Int32.MinValue, true (* 'true' = 'bad'*) ) else
        let n =
            try int32 s with _ ->  fail args lexbuf (SR.lexOutsideThirtyTwoBitSigned()) 0
        INT32(n, false)
      }

  | xint32
  | int32
      { let s = removeUnderscores (lexemeTrimRight lexbuf 1)
        // Allow <max_int+1> to parse as min_int.  Allowed only because we parse '-' as an operator.
        if Ranges.isInt32BadMax s then INT32(Int32.MinValue, true (* 'true' = 'bad'*) ) else
        let n =
            try int32 s with _ ->  fail args lexbuf (SR.lexOutsideThirtyTwoBitSigned()) 0
        INT32(n, false)
      }

  | uint32
      {
        let s = removeUnderscores (lexemeTrimRight lexbuf 1)
        let n =
            try int64 s with _ ->  fail args lexbuf (SR.lexOutsideThirtyTwoBitUnsigned()) 0L
        if n > int64 UInt32.MaxValue || n < 0L then fail args lexbuf (SR.lexOutsideThirtyTwoBitUnsigned()) (UINT32(0u)) else
        UINT32(uint32 (uint64 n)) }

  | uint32l
      {
        let s = removeUnderscores (lexemeTrimRight lexbuf 2)
        let n =
            try int64 s with _ ->  fail args lexbuf (SR.lexOutsideThirtyTwoBitUnsigned()) 0L
        if n > int64 UInt32.MaxValue || n < 0L then fail args lexbuf (SR.lexOutsideThirtyTwoBitUnsigned()) (UINT32(0u)) else
        UINT32(uint32 (uint64 n)) }

  | int64
      { let s = removeUnderscores (lexemeTrimRight lexbuf 1)
        // Allow <max_int+1> to parse as min_int.  Stupid but allowed because we parse '-' as an operator.
        if Ranges.isInt64BadMax s then INT64(Int64.MinValue, true (* 'true' = 'bad'*) ) else
        let n =
            try int64 s with _ ->  fail args lexbuf (SR.lexOutsideSixtyFourBitSigned()) 0L
        INT64(n,false)
      }

  | uint64
      { let s = removeUnderscores (lexemeTrimRight lexbuf 2)
        let n =
          try uint64 s with _ -> fail args lexbuf (SR.lexOutsideSixtyFourBitUnsigned()) 0UL
        UINT64(n) }

  | nativeint
      { let s = removeUnderscores (lexemeTrimRight lexbuf 1)
        // Allow <max_nativeint+1> to parse as min_nativeint.  Stupid but allowed because we parse '-' as an operator.
        if Ranges.isInt64BadMax s then NATIVEINT(Int64.MinValue, true) else
        let n =
            try int64 s with _ ->  fail args lexbuf (SR.lexOutsideNativeSigned()) 0L
        NATIVEINT(n,false)
      }

  | unativeint
      { try
            UNATIVEINT(uint64 (removeUnderscores (lexemeTrimRight lexbuf 2)))
        with _ ->  fail args lexbuf (SR.lexOutsideNativeUnsigned())  (UNATIVEINT(0UL)) }

  | ieee32
      { IEEE32 (evalFloat args lexbuf) }

  | ieee32_dotless_no_exponent
      { IEEE32 (evalFloat args lexbuf) }

  | ieee64
      { IEEE64 (try float(lexeme lexbuf) with _ -> fail args lexbuf (SR.lexInvalidFloat()) 0.0) }

  | decimal
      { try
           let s = removeUnderscores (lexemeTrimRight lexbuf 1)
           // This implements a range check for decimal literals
           let d = System.Decimal.Parse(s,System.Globalization.NumberStyles.AllowExponent ||| System.Globalization.NumberStyles.Number,System.Globalization.CultureInfo.InvariantCulture)
           DECIMAL d
        with
           e -> fail args lexbuf (SR.lexOutsideDecimal()) (DECIMAL (decimal 0))
      }

  | xieee32
      {
        let s = removeUnderscores (lexemeTrimRight lexbuf 2)
        // Even though the intermediate step is an int64, display the "invalid float" message, since it will be less confusing to the user
        let n64 = (try (int64 s) with _ -> fail args lexbuf (SR.lexInvalidFloat()) 0L)
        if n64 > 0xFFFFFFFFL || n64 < 0L then fail args lexbuf (SR.lexOutsideThirtyTwoBitFloat()) (IEEE32 0.0f) else
        IEEE32 (System.BitConverter.ToSingle(System.BitConverter.GetBytes(int32 (uint32 (uint64 n64))),0)) }

  | xieee64
      {
        let n64 = (try int64 (removeUnderscores (lexemeTrimRight lexbuf 2)) with _ -> fail args lexbuf (SR.lexInvalidFloat()) 0L)
        IEEE64 (System.BitConverter.Int64BitsToDouble(n64)) }

  | bignum
      { let s = lexeme lexbuf
        BIGNUM (removeUnderscores (lexemeTrimRight lexbuf 1), s.[s.Length-1..s.Length-1]) }

  // --- END OF NUMBERS ---

  | '+'  { OP_PLUS }
  | '-'  { OP_MINUS }
  | '.'  { DOT }
  | ">=" { GREATER_EQUALS }
  | "<=" { LESS_EQUALS }
  | "!=" { BANG_EQUALS }
  | '='  { EQUALS }

  | "->>" { THREAD_LAST }
  | "->"  { THREAD_FIRST }
  | "<"   { OP_LESS }
  | ">"   { OP_GREATER }
  | ":?"  { COLON_QMARK }

  | "#()"      { UNIT }
  | "unit"     { UNIT }
  | "true"     { TRUE }
  | "false"    { FALSE }
  | "nil"      { NIL }
  | '"'
    { let buf, fin, m = startString 0 lexbuf
      // TODO: validate
      singleQuoteString (buf, fin, m, LexerStringKind.String, args) skip lexbuf
    }
  | "#r" '"' '"' '"'
    { let buf, fin, m = startString 0 lexbuf
      // TODO: validate
      tripleQuoteString (buf, fin, m, LexerStringKind.String, args) skip lexbuf
    }
  | '$' '"' '"' '"'
    { let buf, fin, m = startString 1 lexbuf
      // TODO: validate
      tripleQuoteString (buf, fin, m, LexerStringKind.InterpolatedStringFirst, args) skip lexbuf
    }

  | ('$'+) '"' '"' '"'
    {
      let nest = lexeme lexbuf |> Seq.takeWhile (fun c -> c = '$') |> Seq.length
      let buf, fin, m = startString nest lexbuf
      // TODO: validate
      tripleQuoteString (buf, fin, m, LexerStringKind.InterpolatedStringFirst, args) skip lexbuf
    }

  | '"' '"' '"'
    { let buf, fin, m = startString 0 lexbuf
      // TODO: validate
      tripleQuoteString (buf, fin, m, LexerStringKind.String, args) skip lexbuf
    }

  | '$' '"'
    { let buf, fin, m = startString 1 lexbuf
      // TODO: validate
      singleQuoteString (buf, fin, m, LexerStringKind.InterpolatedStringFirst, args) skip lexbuf
    }

  | '*'        { OP_MULT }
  | '/'        { OP_DIV }
  | ':' propShort { KEYWORD (lexeme lexbuf) }
  | ':' ident_char+ { SYMBOL (lexeme lexbuf) }
  | ident      {
      let text = lexeme lexbuf
      symbolOrKeyword args.CurrentContext text
    }
  | _ { unexpected_char "token" lexbuf }

and tokenStream (args: LexArgs) (skip: bool) = parse
  | whitespace { tokenStream args skip lexbuf }
  | newline    { newline lexbuf; tokenStream args skip lexbuf }
  | ";" [^'\n''\r']* { tokenStream args skip lexbuf  }
  | eof        { EOF }

  | "#line" { HASH_IDENT ((lexeme lexbuf).TrimStart('#'))}

  // punct

  | infix_operators { SYMBOL (lexeme lexbuf) }
  | '(' infix_operators { TOKENLIST [LPAREN; SYMBOL (lexemeTrimLeft lexbuf 1)] }
  | unary_operators { SYMBOL (lexeme lexbuf) }
  | '(' unary_operators { TOKENLIST [LPAREN; SYMBOL (lexemeTrimLeft lexbuf 1)] }
  | '('           { LPAREN }
  | ')'           { RPAREN }
  | '{'           { LBRACE }
  | '}'           { RBRACE }
  | '['           { LBRACKET }
  | ']'           { RBRACKET }
  | "::" anyspace+ { COLON_COLON }
  | ':' anyspace+ { COLON }
  | ','           { COMMA }
  | "||"          { SYMBOL (lexeme lexbuf) }
  | "-||"          { SYMBOL (lexeme lexbuf) }
  | '|'           { BAR }
  | '.' anyspace+ { DOT }
  | "#("          { HASH_PAREN }
  | "#["          { HASH_BRACKET }
  | "#{"          { HASH_BRACE }
  | ".["          { DOT_BRACKET }
  | "{|"          { BRACE_BAR }
  | "|}"          { BAR_BRACE }
  | "[|"          { BRACKET_BAR }
  | "|]"          { BAR_BRACKET }

  | "(|>"         { TOKENLIST [LPAREN; SYMBOL (lexemeTrimLeft lexbuf 1)] }
  | "(||)"        { TOKENLIST [PAREN_BAR; BAR_PAREN] }
  | "(||"         { TOKENLIST [LPAREN; SYMBOL (lexemeTrimLeft lexbuf 1)] }
  | "(|"          { PAREN_BAR }
  | "|)"          { BAR_PAREN }


  | "..." { SYMBOL (lexeme lexbuf) }

  // operators
  | '-' anyspace+   { SYMBOL "-" }
  | '*' anyspace+   { SYMBOL "*" }
  | '+' anyspace+   { SYMBOL "+" }
  | '/' anyspace+   { SYMBOL "/" }

  | ident_arrow { SYMBOL (lexeme lexbuf) }

  | "->>" { SYMBOL (lexeme lexbuf) }
  | "->"  { SYMBOL (lexeme lexbuf) }
  | ">="  { SYMBOL (lexeme lexbuf) }
  | "<="  { SYMBOL (lexeme lexbuf) }
  | ">>"  { SYMBOL (lexeme lexbuf) }
  | "!="  { SYMBOL (lexeme lexbuf) }
  | '<'   { SYMBOL (lexeme lexbuf) }
  | '>'   { SYMBOL (lexeme lexbuf) }
  | '='   { SYMBOL (lexeme lexbuf) }
  | "&&"  { SYMBOL (lexeme lexbuf) }
  | "||"  { SYMBOL (lexeme lexbuf) }
  | ":>"  { SYMBOL (lexeme lexbuf) }
  | ":?"  { SYMBOL (lexeme lexbuf) }

  // Constants
  | "#()"      { UNIT }
  | "()"       { UNIT }
  | "unit"     { UNIT }
  | "true"     { TRUE }
  | "false"    { FALSE }
  | "nil"      { NIL }
  | "#\\" charWords { CHAR (lexeme lexbuf) }
  | "#\\u" unicodeChars { CHAR (lexeme lexbuf) }
  | "#\\U" unicodeChars { CHAR (lexeme lexbuf) }
  | "#\\" nonWhitespace { CHAR (lexeme lexbuf) }

  // --- START OF NUMBERS ---

  | int8
      { let n = lexemeTrimRightToInt32 args lexbuf 1
        // Allow <max_int+1> to parse as min_int.  Allowed only because we parse '-' as an operator.
        if Ranges.isInt8BadMax n then INT8(SByte.MinValue, true (* 'true' = 'bad'*) )
        else if n > int SByte.MaxValue || n < int SByte.MinValue then fail args lexbuf (SR.lexOutsideEightBitSigned()) (INT8(0y, false))
        else INT8(sbyte n, false)  }

  | xint8
      { let n = lexemeTrimRightToInt32 args lexbuf 1
        if n > int Byte.MaxValue || n < 0 then fail args lexbuf (SR.lexOutsideEightBitSignedHex()) (INT8(0y, false))
        else INT8(sbyte(byte(n)), false) }

  | uint8
      { let n = lexemeTrimRightToInt32 args lexbuf 2
        if n > int Byte.MaxValue || n < 0 then fail args lexbuf (SR.lexOutsideEightBitUnsigned()) (UINT8(0uy))
        else UINT8(byte n)  }

  | int16
      { let n = lexemeTrimRightToInt32 args lexbuf 1
        // Allow <max_int+1> to parse as min_int.  Allowed only because we parse '-' as an operator.
        if Ranges.isInt16BadMax n then INT16(Int16.MinValue, true (* 'true' = 'bad'*) )
        else if n > int Int16.MaxValue || n < int Int16.MinValue then fail args lexbuf (SR.lexOutsideSixteenBitSigned()) (INT16(0s, false))
        else INT16(int16 n, false)  }

  | xint16
      { let n = lexemeTrimRightToInt32 args lexbuf 1
        if n > int UInt16.MaxValue || n < 0 then fail args lexbuf (SR.lexOutsideSixteenBitSigned()) (INT16(0s,false))
        else INT16(int16(uint16(n)), false) }

  | uint16
      { let n = lexemeTrimRightToInt32 args lexbuf 2
        if n > int UInt16.MaxValue || n < 0 then fail args lexbuf (SR.lexOutsideSixteenBitUnsigned()) (UINT16(0us))
        else UINT16(uint16 n) }
  | xint
  | int
      { let s = removeUnderscores (lexeme lexbuf)
        // Allow <max_int+1> to parse as min_int.  Allowed only because we parse '-' as an operator.
        if Ranges.isInt32BadMax s then INT32(Int32.MinValue, true (* 'true' = 'bad'*) ) else
        let n =
            try int32 s with _ ->  fail args lexbuf (SR.lexOutsideThirtyTwoBitSigned()) 0
        INT32(n, false)
      }

  | xint32
  | int32
      { let s = removeUnderscores (lexemeTrimRight lexbuf 1)
        // Allow <max_int+1> to parse as min_int.  Allowed only because we parse '-' as an operator.
        if Ranges.isInt32BadMax s then INT32(Int32.MinValue, true (* 'true' = 'bad'*) ) else
        let n =
            try int32 s with _ ->  fail args lexbuf (SR.lexOutsideThirtyTwoBitSigned()) 0
        INT32(n, false)
      }

  | uint32
      {
        let s = removeUnderscores (lexemeTrimRight lexbuf 1)
        let n =
            try int64 s with _ ->  fail args lexbuf (SR.lexOutsideThirtyTwoBitUnsigned()) 0L
        if n > int64 UInt32.MaxValue || n < 0L then fail args lexbuf (SR.lexOutsideThirtyTwoBitUnsigned()) (UINT32(0u)) else
        UINT32(uint32 (uint64 n)) }

  | uint32l
      {
        let s = removeUnderscores (lexemeTrimRight lexbuf 2)
        let n =
            try int64 s with _ ->  fail args lexbuf (SR.lexOutsideThirtyTwoBitUnsigned()) 0L
        if n > int64 UInt32.MaxValue || n < 0L then fail args lexbuf (SR.lexOutsideThirtyTwoBitUnsigned()) (UINT32(0u)) else
        UINT32(uint32 (uint64 n)) }

  | int64
      { let s = removeUnderscores (lexemeTrimRight lexbuf 1)
        // Allow <max_int+1> to parse as min_int.  Stupid but allowed because we parse '-' as an operator.
        if Ranges.isInt64BadMax s then INT64(Int64.MinValue, true (* 'true' = 'bad'*) ) else
        let n =
            try int64 s with _ ->  fail args lexbuf (SR.lexOutsideSixtyFourBitSigned()) 0L
        INT64(n,false)
      }

  | uint64
      { let s = removeUnderscores (lexemeTrimRight lexbuf 2)
        let n =
          try uint64 s with _ -> fail args lexbuf (SR.lexOutsideSixtyFourBitUnsigned()) 0UL
        UINT64(n) }

  | nativeint
      { let s = removeUnderscores (lexemeTrimRight lexbuf 1)
        // Allow <max_nativeint+1> to parse as min_nativeint.  Stupid but allowed because we parse '-' as an operator.
        if Ranges.isInt64BadMax s then NATIVEINT(Int64.MinValue, true) else
        let n =
            try int64 s with _ ->  fail args lexbuf (SR.lexOutsideNativeSigned()) 0L
        NATIVEINT(n,false)
      }

  | unativeint
      { try
            UNATIVEINT(uint64 (removeUnderscores (lexemeTrimRight lexbuf 2)))
        with _ ->  fail args lexbuf (SR.lexOutsideNativeUnsigned())  (UNATIVEINT(0UL)) }

  | ieee32
      { IEEE32 (evalFloat args lexbuf) }

  | ieee32_dotless_no_exponent
      { IEEE32 (evalFloat args lexbuf) }

  | ieee64
      { IEEE64 (try float(lexeme lexbuf) with _ -> fail args lexbuf (SR.lexInvalidFloat()) 0.0) }

  | decimal
      { try
           let s = removeUnderscores (lexemeTrimRight lexbuf 1)
           // This implements a range check for decimal literals
           let d = System.Decimal.Parse(s,System.Globalization.NumberStyles.AllowExponent ||| System.Globalization.NumberStyles.Number,System.Globalization.CultureInfo.InvariantCulture)
           DECIMAL d
        with
           e -> fail args lexbuf (SR.lexOutsideDecimal()) (DECIMAL (decimal 0))
      }

  | xieee32
      {
        let s = removeUnderscores (lexemeTrimRight lexbuf 2)
        // Even though the intermediate step is an int64, display the "invalid float" message, since it will be less confusing to the user
        let n64 = (try (int64 s) with _ -> fail args lexbuf (SR.lexInvalidFloat()) 0L)
        if n64 > 0xFFFFFFFFL || n64 < 0L then fail args lexbuf (SR.lexOutsideThirtyTwoBitFloat()) (IEEE32 0.0f) else
        IEEE32 (System.BitConverter.ToSingle(System.BitConverter.GetBytes(int32 (uint32 (uint64 n64))),0)) }

  | xieee64
      {
        let n64 = (try int64 (removeUnderscores (lexemeTrimRight lexbuf 2)) with _ -> fail args lexbuf (SR.lexInvalidFloat()) 0L)
        IEEE64 (System.BitConverter.Int64BitsToDouble(n64)) }

  | bignum
      { let s = lexeme lexbuf
        BIGNUM (removeUnderscores (lexemeTrimRight lexbuf 1), s.[s.Length-1..s.Length-1]) }

  // --- END OF NUMBERS ---

  | '$' '"'
    { let buf, fin, m = startString 1 lexbuf
      // TODO: validate
      singleQuoteString (buf, fin, m, LexerStringKind.InterpolatedStringFirst, args) skip lexbuf
    }

  | '"'
    { let buf, fin, m = startString 0 lexbuf
      // TODO: validate
      singleQuoteString (buf, fin, m, LexerStringKind.String, args) skip lexbuf
    }

  | '$' '"' '"' '"'
    { let buf, fin, m = startString 1 lexbuf
      // TODO: validate
      tripleQuoteString (buf, fin, m, LexerStringKind.InterpolatedStringFirst, args) skip lexbuf
    }

  | ('$'+) '"' '"' '"'
    {
      let nest = lexeme lexbuf |> Seq.takeWhile (fun c -> c = '$') |> Seq.length
      let buf, fin, m = startString nest lexbuf
      // TODO: validate
      tripleQuoteString (buf, fin, m, LexerStringKind.InterpolatedStringFirst, args) skip lexbuf
    }

  | '"' '"' '"'
    { let buf, fin, m = startString 0 lexbuf
      // TODO: validate
      tripleQuoteString (buf, fin, m, LexerStringKind.String, args) skip lexbuf
    }

  | "#r" '"' '"' '"'
    { let buf, fin, m = startString 0 lexbuf
      // TODO: validate
      tripleQuoteString (buf, fin, m, LexerStringKind.String, args) skip lexbuf
    }

  // Exprs
  | ':' propShort { KEYWORD (lexeme lexbuf) }
  | ':' ident_char+ { SYMBOL (lexeme lexbuf) }
  | '.' ident_char+ {
      let text = lexeme lexbuf;
      SYMBOL text }
  | '+' ident_char+ {
      let text = lexeme lexbuf;
      SYMBOL text }
  | '-' ident_char+ {
      let text = lexeme lexbuf;
      SYMBOL text }
  | ident      {
    let text = lexeme lexbuf
    if args.mode.IsQuasiquoteMode then
      if text = "unquote" then
        UNQUOTE_KW
      else if text = "splice-unquote" then
        SPLICE_UNQUOTE_KW
      else
        SYMBOL text
    else
      SYMBOL text }
  | _ { unexpected_char "tokenStream" lexbuf }

and singleQuoteString (sargs: LexerStringArgs) (skip: bool) = parse
 | '"'
    { let (buf, fin, _m, kind, args) = sargs
      let cont = LexCont.Token(args.stringNest)
      fin.Finish buf kind (LexerStringFinisherContext()) cont
    }
 | newline
  { newline lexbuf;
    let (buf, _fin, m, kind, args) = sargs
    addUnicodeString buf (lexeme lexbuf)
    singleQuoteString sargs skip lexbuf
  }
 | escape_char
   {
     let (buf, _fin, m, kind, args) = sargs
     addUnicodeString buf (lexeme lexbuf)
     singleQuoteString sargs skip lexbuf
   }
  | _
    { let (buf, _fin, m, kind, args) = sargs
      addUnicodeString buf (lexeme lexbuf)
      singleQuoteString sargs skip lexbuf }

and tripleQuoteString (sargs: LexerStringArgs) (skip: bool) = parse
 | '"' '"' '"'
    { let (buf, fin, _m, kind, args) = sargs
      let cont = LexCont.Token(args.stringNest)
      fin.Finish buf kind (LexerStringFinisherContext.TripleQuote) cont
    }
 | newline
  { newline lexbuf;
    let (buf, _fin, m, kind, args) = sargs
    addUnicodeString buf (lexeme lexbuf)
    tripleQuoteString sargs skip lexbuf
  }
 // | escape_char
 //   {
 //     let (buf, _fin, m, kind, args) = sargs
 //     addUnicodeString buf (lexeme lexbuf)
 //     singleQuoteString sargs skip lexbuf
 //   }
 | _
    { let (buf, _fin, m, kind, args) = sargs
      addUnicodeString buf (lexeme lexbuf)
      tripleQuoteString sargs skip lexbuf }
